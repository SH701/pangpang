'use client'

import { ChevronDownIcon, InformationCircleIcon,ChevronUpIcon  } from '@heroicons/react/24/solid'
import { useEffect, useMemo, useRef, useState } from 'react'

export default function Slider() {
  const [showInfo,setShowInfo] = useState(true) 
  const [showex,setShowex]=useState(false)
  const steps = ['Low', '', 'High'] as const
  const max = steps.length - 1
  const [level, setLevel] = useState(0)
  const percent = (level / max) * 100

  const famSteps = ['Low', '', 'High'] as const
  const fMax = famSteps.length - 1
  const [fam, setFam] = useState(0) 
  const fPercent = (fam / fMax) * 100

  const expressions = {
   ask_eat: [
    [
      {
        phrase: 'Ïù¥Í±∞ Î®πÏñ¥',
        explanation: 'Pure casual Korean! Family members use this direct, warm tone. No formality needed when you‚Äôre super close. ü§ó'
      },
      {
        phrase: 'Ïù¥Í±∞ Î®πÏñ¥Î¥ê',
        explanation: 'Adding ‚ÄúÎ¥ê‚Äù softens it slightly while keeping the close relationship. Perfect for friends in public spaces. ‚òï'
      },
      {
        phrase: 'Ïù¥Í±∞ Ìïú Î≤à Î®πÏñ¥Î¥êÏöî',
        explanation: 'Even with closeness, you show respect for the setting. ‚ÄúÌïú Î≤à‚Äù adds gentle suggestion rather than command. ü´±'
      },
    ],
    [
      {
        phrase: 'Ïù¥Í≤É Ï¢Ä Î®πÏñ¥Î≥ºÎûò?',
        explanation: 'Question form (‚Äú~Î≥ºÎûò?‚Äù) makes it a suggestion, not an order. ‚ÄúÏ¢Ä‚Äù adds politeness while staying friendly. üç™'
      },
      {
        phrase: 'Ïù¥Í≤É Ï¢Ä ÎìúÏÑ∏Ïöî',
        explanation: 'Standard workplace politeness. ‚ÄúÎìúÏÑ∏Ïöî‚Äù shows respect, ‚ÄúÏ¢Ä‚Äù keeps it approachable. Safe for most office situations! üíº'
      },
      {
        phrase: 'Ïù¥Í≤É Ìïú Î≤à ÎìúÏÖîÎ≥¥ÏÑ∏Ïöî',
        explanation: 'More formal but still natural. Perfect for semi-formal work gatherings where respect matters. üçΩÔ∏è'
      },
    ],
    [
      {
        phrase: 'Ïù¥Í≤É Ï¢Ä ÎìúÏÖîÎ≥¥ÏÑ∏Ïöî',
        explanation: 'Service industry standard. Polite but approachable ‚Äî wants to maintain customer friendliness. üõçÔ∏è'
      },
      {
        phrase: 'Ïù¥Í≤É ÎìúÏÖîÎ≥¥ÏãúÍ≤†Ïñ¥Ïöî?',
        explanation: 'Professional service tone. The question form gives customer choice while showing proper respect. üé©'
      },
      {
        phrase: 'Ïù¥Í≤É ÎìúÏãúÍ≤†ÏäµÎãàÍπå?',
        explanation: 'Top-tier service Korean. Formal but natural ‚Äî what you‚Äôd hear at luxury hotels or formal business meetings. ‚ú®'
      },
    ]
  ],
   ask_did_you_eat: [
    // Low Intimacy
    [
      {
        phrase: 'Î∞• Î®πÏóàÏñ¥?',
        explanation: 'Classic Korean greeting! Shows care in the most casual way. This is how Korean families check on each other. üê•'
      },
      {
        phrase: 'Î∞• Î®πÏóàÏñ¥Ïöî?',
        explanation: 'Adding ‚ÄúÏöî‚Äù shows basic politeness while maintaining warmth. Perfect for close friends when you want to be slightly more polite. üåº'
      },
      {
        phrase: 'ÏãùÏÇ¨ ÌïòÏÖ®Ïñ¥Ïöî?',
        explanation: '‚ÄúÏãùÏÇ¨‚Äù is more formal than ‚ÄúÎ∞•‚Äù, and ‚ÄúÌïòÏÖ®Ïñ¥Ïöî‚Äù shows respect. Great when talking to people you‚Äôre close to but need to respect. üôá'
      },
    ],
    // Medium Intimacy
    [
      {
        phrase: 'Î∞•ÏùÄ Î®πÏóàÏñ¥?',
        explanation: 'Adding ‚ÄúÏùÄ‚Äù makes it slightly more structured. Common in relaxed workplace conversations during breaks. üçµ'
      },
      {
        phrase: 'Ï†êÏã¨ ÎìúÏÖ®Ïñ¥Ïöî?',
        explanation: '‚ÄúÏ†êÏã¨‚Äù specifies the meal, ‚ÄúÎìúÏÖ®Ïñ¥Ïöî‚Äù shows workplace-appropriate respect. Standard office small talk. üíº'
      },
      {
        phrase: 'ÏãùÏÇ¨Îäî ÌïòÏÖ®ÏäµÎãàÍπå?',
        explanation: 'Business-level formality. ‚ÄúÏäµÎãàÍπå‚Äù ending shows professional respect. Used when checking on clients or partners. üóùÔ∏è'
      },
    ],
    // High Intimacy
    [
      {
        phrase: 'Î∞• ÎìúÏÖ®Ïñ¥Ïöî?',
        explanation: 'Casual but respectful service tone. Common in casual restaurants or when vendors check on customers. üçö'
      },
      {
        phrase: 'ÏãùÏÇ¨ ÌïòÏÖ®ÏäµÎãàÍπå?',
        explanation: 'Professional hospitality language. Shows proper respect while maintaining service industry warmth. üè®'
      },
      {
        phrase: 'ÏßÑÏßÄ ÎìúÏÖ®ÏäµÎãàÍπå?',
        explanation: '‚ÄúÏßÑÏßÄ‚Äù is the highest honorific for meal. Reserved for VIP treatment or very formal dining situations. üç∑'
      },
    ]
  ],
    apology: [
    // Low Intimacy
    [
      {
        phrase: 'ÏûòÎ™ªÌñàÏñ¥',
        explanation: 'Direct admission among family. No extra formality needed ‚Äî just honest acknowledgment between close people. üíî'
      },
      {
        phrase: 'ÎÇ¥Í∞Ä ÏûòÎ™ªÌñàÏñ¥',
        explanation: 'Adding ‚ÄúÎÇ¥Í∞Ä‚Äù (I) takes clear responsibility. Shows sincerity while keeping the casual tone with friends. ü§ó'
      },
      {
        phrase: 'Ï†úÍ∞Ä ÏûòÎ™ªÌñàÏñ¥Ïöî',
        explanation: '‚ÄúÏ†úÍ∞Ä‚Äù is the humble form of ‚ÄúI‚Äù, with polite ‚ÄúÏñ¥Ïöî‚Äù ending. Shows respect while maintaining some closeness. üôè'
      },
    ],
    // Medium Intimacy
    [
      {
        phrase: 'ÎÇ¥ Ïã§ÏàòÏïº',
        explanation: '‚ÄúÏã§Ïàò‚Äù (mistake) sounds more professional than ‚ÄúÏûòÎ™ª‚Äù. Good for minor work errors in relaxed settings. üòÖ'
      },
      {
        phrase: 'Ï†úÍ∞Ä Ïã§ÏàòÌñàÏäµÎãàÎã§',
        explanation: 'Standard workplace apology. ‚ÄúÏã§ÏàòÌñàÏäµÎãàÎã§‚Äù is professional but not overly dramatic. Safe for most office situations. üíº'
      },
      {
        phrase: 'Ï†ÄÏùò ÏûòÎ™ªÏûÖÎãàÎã§',
        explanation: '‚ÄúÏ†ÄÏùò ÏûòÎ™ªÏûÖÎãàÎã§‚Äù is structured and takes clear responsibility. Perfect for formal work apologies. üìñ'
      },
    ],
    // High Intimacy
    [
      {
        phrase: 'Ï†úÍ∞Ä ÏûòÎ™ªÌñàÎÑ§Ïöî',
        explanation: '‚ÄúÎÑ§Ïöî‚Äù ending softens the formality while maintaining respect. Common in service industry apologies. üëú'
      },
      {
        phrase: 'Ï†ÄÏùò Ïã§ÏàòÏòÄÏäµÎãàÎã§',
        explanation: 'Formal but natural business language. ‚ÄúÏòÄÏäµÎãàÎã§‚Äù shows the mistake is acknowledged and resolved. üóÇÔ∏è'
      },
      {
        phrase: 'Ï†ÄÏùò Î∂ÄÏ£ºÏùòÏòÄÏäµÎãàÎã§',
        explanation: '‚ÄúÎ∂ÄÏ£ºÏùò‚Äù (carelessness) shows deep responsibility. Used for serious situations requiring maximum respect and accountability. üìÑ'
      },
    ]
  ],
} as const

  const situationKeys = useMemo(
    () => Object.keys(expressions) as Array<keyof typeof expressions>,
    []
  )

  const getSeoulParts = () => {
    const fmt = (opt: Intl.DateTimeFormatOptions) =>
      new Intl.DateTimeFormat('en-CA', { timeZone: 'Asia/Seoul', ...opt })
    const y = Number(fmt({ year: 'numeric' }).format(new Date()))
    const m = Number(fmt({ month: '2-digit' }).format(new Date()))
    const d = Number(fmt({ day: '2-digit' }).format(new Date()))
    return { y, m, d }
  }

  const getSeoulDateKey = () => {
    const { y, m, d } = getSeoulParts()
    const mm = String(m).padStart(2, '0')
    const dd = String(d).padStart(2, '0')
    return `${y}-${mm}-${dd}`
  }

  const hash = (str: string) => {
    let h = 5381
    for (let i = 0; i < str.length; i++) h = ((h << 5) + h) + str.charCodeAt(i)
    return Math.abs(h)
  }

  const [situationIdx, setSituationIdx] = useState(
    () => hash(getSeoulDateKey()) % situationKeys.length
  )
  const timerRef = useRef<number | null>(null)

  const msUntilNextSeoulMidnight = () => {
    const { y, m, d } = getSeoulParts()
    // KST(UTC+9) ÏûêÏ†ï ‚Üí UTCÎ°úÎäî Ï†ÑÎÇ† 15:00, Îî∞ÎùºÏÑú -9ÏãúÍ∞Ñ
    const nextDayUTC = Date.UTC(y, m - 1, d + 1, -9, 0, 0)
    const nowUTC = Date.now()
    return Math.max(0, nextDayUTC - nowUTC)
  }

  useEffect(() => {
    const schedule = () => {
      const ms = msUntilNextSeoulMidnight()
      timerRef.current = window.setTimeout(() => {
        const newIdx = hash(getSeoulDateKey()) % situationKeys.length
        setSituationIdx(newIdx)
        schedule()
      }, ms)
    }
    schedule()
    return () => {
      if (timerRef.current) window.clearTimeout(timerRef.current)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])


  const currentKey = situationKeys[situationIdx]
  const currentSentence = expressions[currentKey][level][fam]

  return (
    <div className="w-[335px] flex flex-col justify-center items-center rounded-xl shadow-[0_-4px_6px_-1px_rgba(0,0,0,0.1)] mx-auto bg-white mt-5">
      <span className="font-semibold text-lg py-2 px-4 mt-3">Today`s honorific expression</span>

      {/* Ïò§ÎäòÏùò Î¨∏Ïû• */}
     <div className="w-[296px] bg-gray-100 border border-gray-200 py-3 my-2 mb-4 rounded-xl">
  <div className=" text-base relative text-center px-8 py-1">
    <span>{currentSentence.phrase}</span>
    <button
      onClick={() => setShowex((prev) => !prev)}
      className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-600 hover:text-gray-800"
    >
      {showex ? (
        <ChevronUpIcon className="size-5" />
      ) : (
        <ChevronDownIcon className="size-5" />
      )}
    </button>
  </div>

  {showex && (
    <div className="text-[13px] px-2 py-1 text-center border-t border-gray-400 text-gray-700">
      {currentSentence.explanation}
    </div>
  )}
</div>
{showInfo && (
          <div className="flex justify-center mb-4">
          <span className="inline-flex items-center bg-white px-3 py-1 text-xs text-gray-600 rounded-full shadow border">
            <InformationCircleIcon className="w-4 h-4 mr-1 text-blue-600" />
            Move the slider to match your situation
          </span>
        </div>
      )}
      {/* Ïä¨ÎùºÏù¥Îçî Î∞ïÏä§ */}
      <div className="w-[335px] px-4 max-w-md mx-auto border rounded-xl border-blue-400 bg-[#EFF6FF] pb-4">
        <div className='pt-2'>
        <span >Intimacy Level</span>
        </div>
        <div className="relative h-2 mb-2 mt-6">
          <div className="absolute inset-0 bg-gray-200 rounded-full" />
          {steps.map((_, i) => (
            <div
              key={`lvl-tick-${i}`}
              className={`absolute top-1/2 z-10 w-3 h-3 rounded-full border-2 transform -translate-x-1/2 -translate-y-1/2 transition-colors ${
                i <= level ? 'bg-blue-600 border-blue-600' : 'bg-white border-gray-300'
              }`}
              style={{ left: `${(i / max) * 100}%` }}
            />
          ))}
          <div
            className="absolute inset-y-0 left-0 bg-blue-600 rounded-full transition-all duration-300 ease-out"
            style={{ width: `${percent}%` }}
          />
          <div
            className="absolute top-1/2 transform -translate-y-1/2 transition-all duration-300 ease-out"
            style={{ left: `${percent}%` }}
          >
            <div className="w-6 h-6 bg-white border-2 border-blue-600 rounded-full shadow -translate-x-1/2" />
          </div>
          <input
            type="range"
            min={0}
            max={max}
            step={1}
            value={level}
            onChange={(e) => {
              setLevel(Number(e.target.value))  
              setShowInfo(false)}}
            className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
            aria-label="Speech level"
          />
        </div>
          
        <div className="flex justify-between text-[11px] text-gray-600 pb-3 mb-2 border-b border-gray-300">
          {steps.map((label, i) => (
            <span
              key={`lvl-label-${i}`}
              className={`flex-1 ${i === 0 ? 'text-left' : i === steps.length - 1 ? 'text-right' : 'text-center'}`}
            >
              {label}
            </span>
          ))}
          
        </div>
         <div className='pb-4'>
        <span >Formality Level</span>
        </div>
          

        <div className="relative h-2 mb-2">
          
          <div className="absolute inset-0 bg-gray-200 rounded-full" />
          
          {famSteps.map((_, i) => (
            <div
              key={`fam-tick-${i}`}
              className={`absolute top-1/2 z-10 w-3 h-3 rounded-full border-2 transform -translate-x-1/2 -translate-y-1/2 transition-colors ${
                i <= fam ? 'bg-blue-600 border-blue-600' : 'bg-white border-gray-300'
              }`}
              style={{ left: `${(i / fMax) * 100}%` }}
            />
          ))}
          <div
            className="absolute inset-y-0 left-0 bg-blue-600 rounded-full transition-all duration-300 ease-out"
            style={{ width: `${fPercent}%` }}
          />
          <div
            className="absolute top-1/2 transform -translate-y-1/2 transition-all duration-300 ease-out"
            style={{ left: `${fPercent}%` }}
          >
            <div className="w-6 h-6 bg-white border-2 border-blue-600 rounded-full shadow -translate-x-1/2" />
          </div>
          <input
            type="range"
            min={0}
            max={fMax}
            step={1}
            value={fam}
            onChange={(e) => {
              setFam(Number(e.target.value)) 
              setShowInfo(false)}}
            className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
            aria-label="Familiarity level"
          />
        </div>

        <div className="flex justify-between text-[11px] text-gray-600">
          {famSteps.map((label, i) => (
            <span
              key={`fam-label-${i}`}
              className={`flex-1 ${i === 0 ? 'text-left' : i === famSteps.length - 1 ? 'text-right' : 'text-center'}`}
            >
              {label}
            </span>
          ))}
        </div>
      </div>
    </div>
  )
}